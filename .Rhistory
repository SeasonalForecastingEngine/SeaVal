library(PostProcessing)
q(save = 'no')
devtools::install_github('SeasonalForecastingEngine/ForecastTools')
devtools::install_github('SeasonalForecastingEngine/SeaVal')
data_dir = '/nr/project/stat/CONFER/Data/validation/example_data/202101/'
cv_dt = cv_to_dt(data_dir)
library(data.table)
library(ForecastTools)
library(SeaVal)
data_dir = '/nr/project/stat/CONFER/Data/validation/example_data/202101/'
cv_dt = cv_to_dt(data_dir)
devtools::install_github('SeasonalForecastingEngine/SeaVal')
library(SeaVal)
data_dir = '/nr/project/stat/CONFER/Data/validation/example_data/202101/'
cv_dt = cv_to_dt(data_dir)
library(SeaVal)
data_dir = '/nr/project/stat/CONFER/Data/validation/example_data/202101/'
cv_dt = cv_to_dt(data_dir)
cv_dt
cv_to_dt
devtools::install_github('SeasonalForecastingEngine/SeaVal')
library(SeaVal)
data_dir = '/nr/project/stat/CONFER/Data/validation/example_data/202101/'
cv_dt = cv_to_dt(data_dir)
library(ForecastTools)
cv_dt = cv_to_dt(data_dir)
library(ForecastTools)
library(SeaVal)
data_dir = '/nr/project/stat/CONFER/Data/validation/example_data/202101/'
cv_dt = cv_to_dt(data_dir)
getwd()
cd ../SeaVal
setwd(' ../SeaVal')
setwd('../SeaVal')
devtools::document()
devtools::document()
devtools::document()
devtools::install_github('SeasonalForecastingEngine/ForecastTools')
devtools::install_github('SeasonalForecastingEngine/SeaVal')
library(data.table)
library(ForecastTools)
library(SeaVal)
data_dir = '/nr/project/stat/CONFER/Data/validation/example_data/202101/'
cv_dt = cv_to_dt(data_dir)
print(cv_dt)
mse_dt = MSESS_dt(cv_dt,fc_col = 'prec',obs_col = 'obs')
library(ForecastTools)
library(SeaVal)
getwd()
devtools::document()
devtools::install_github('SeasonalForecastingEngine/ForecastTools')
devtools::install_github('SeasonalForecastingEngine/SeaVal')
library(data.table)
library(ForecastTools)
library(SeaVal)
data_dir = '/nr/project/stat/CONFER/Data/validation/example_data/202101/'
cv_dt = cv_to_dt(data_dir)
print(cv_dt)
mse_dt = MSESS_dt(cv_dt,fc_col = 'prec',obs_col = 'obs')
print(mse_dt)
print(mse_dt)
ggplot_dt(mse_dt,'MSESS',rr = c(-0.5,0.5))
mse_dt = add_countries(mse_dt)
'/nr/project/stat/CONFER/Data/GHAcountries.csv'
cs = fread(countryfile)
countryfile = '/nr/project/stat/CONFER/Data/GHAcountries.csv'
cs = fread(countryfile)
cs
dt = fread('/nr/project/stat/CONFER/Data/GHAcountries.csv')
dt
country_dt = fread('/nr/project/stat/CONFER/Data/GHAcountries.csv')
fwrite(country_dt,'/nr/user/claudio/pkg/SeaVal/data/countries.csv')
q()
library(SeaVal)
data(countries)
countries
?data
data(countries,sep = ',')
?fread
countryfile = '/nr/project/stat/CONFER/Data/GHAcountries.csv'
cs = fread(countryfile)
library(data.table)
cs = fread(countryfile)
fwrite(cs,file = '~/pkg/SeaVal/data/countries.csv',sep = ';')
q(save = 'no')
library(SeaVal)
data(countries)
countries
data(countries)
cs = as.data.table(countries)
library(data.table)
cs = as.data.table(countries)
cs
devtools::install_github('SeasonalForecastingEngine/SeaVal')
library(data.table)
library(ForecastTools)
library(SeaVal)
data_dir = '/nr/project/stat/CONFER/Data/validation/example_data/202101/'
cv_dt = cv_to_dt(data_dir)
print(cv_dt)
mse_dt = MSESS_dt(cv_dt,fc_col = 'prec',obs_col = 'obs')
print(mse_dt)
ggplot_dt(mse_dt,'MSESS',rr = c(-0.5,0.5))
mse_dt = add_countries(mse_dt)
mse_country_averaged = mse_dt[,.(MSE = mean(MSE),
clim_MSE = mean(clim_MSE),
MSESS = mean(MSESS)),
by = country]
print(mse_country_averaged)
devtools::install_github('SeasonalForecastingEngine/SeaVal')
library(SeaVal)
library(ForecastTools)
data_dir = '/nr/project/stat/CONFER/Data/validation/example_data/202101/'
cv_dt = cv_to_dt(data_dir)
library(data.table)
library(ForecastTools)
library(SeaVal)
data_dir = '/nr/project/stat/CONFER/Data/validation/example_data/202101/'
cv_dt = cv_to_dt(data_dir)
print(cv_dt)
mse_dt = MSESS_dt(cv_dt,fc_col = 'prec',obs_col = 'obs')
print(mse_dt)
ggplot_dt(mse_dt,'MSESS',rr = c(-0.5,0.5))
mse_dt = add_countries(mse_dt)
mse_country_averaged = mse_dt[,.(MSE = mean(MSE),
clim_MSE = mean(clim_MSE),
MSESS = mean(MSESS)),
by = country]
print(mse_country_averaged)
devtools::document()
devtools::install_github('SeasonalForecastingEngine/ForecastTools')
devtools::install_github('SeasonalForecastingEngine/SeaVal')
library(data.table)
library(ForecastTools)
library(SeaVal)
data_dir = '/nr/project/stat/CONFER/Data/validation/example_data/202101/'
cv_dt = cv_to_dt(data_dir)
print(cv_dt)
devtools::install_github('SeasonalForecastingEngine/ForecastTools')
devtools::install_github('SeasonalForecastingEngine/SeaVal')
library(data.table)
library(ForecastTools)
library(SeaVal)
data_dir = '/nr/project/stat/CONFER/Data/validation/example_data/202101/'
cv_dt = cv_to_dt(data_dir)
print(cv_dt)
mse_dt = MSESS_dt(cv_dt,fc_col = 'prec',obs_col = 'obs')
print(mse_dt)
print(mse_dt)
ggplot_dt(mse_dt,'MSESS',rr = c(-0.5,0.5))
mse_dt = add_countries(mse_dt)
mse_country_averaged = mse_dt[,.(MSE = mean(MSE),
clim_MSE = mean(clim_MSE),
MSESS = mean(MSESS)),
by = country]
print(mse_country_averaged)
cv_dt[,prec_ano := prec - mean(prec), by = .(lon,lat)] # derive anomaly for each gridpoint
ggplot_dt(cv_dt,'prec_ano',rr = c(-10,10))
cv_dt[,obs_ano := obs - mean(obs), by = .(lon,lat)] # derive anomaly for each gridpoint
ggplot_dt(cv_dt,'obs_ano',rr = c(-10,10))
cv_dt[year == 2016,prec_ano := prec - mean(prec), by = .(lon,lat)] # derive anomaly for each gridpoint
ggplot_dt(cv_dt,'prec_ano',rr = c(-10,10))
cv_dt[,prec_ano := prec - mean(prec), by = .(lon,lat)] # derive anomaly for each gridpoint
ggplot_dt(cv_dt[year == 2016],'prec_ano',rr = c(-10,10))
cv_dt[,obs_ano := obs - mean(obs), by = .(lon,lat)] # derive anomaly for each gridpoint
ggplot_dt(cv_dt[year == 2016],'obs_ano',rr = c(-10,10))
rr = c(-15,15)
cv_dt[,prec_ano := prec - mean(prec), by = .(lon,lat)] # derive anomaly for each gridpoint
ggplot_dt(cv_dt[year == 2016],'prec_ano',rr = rr)
cv_dt[,obs_ano := obs - mean(obs), by = .(lon,lat)] # derive anomaly for each gridpoint
ggplot_dt(cv_dt[year == 2016],'obs_ano',rr = rr)
### some more example plots, here of 2016 predicted and observed anomalies: ###
rr = c(-25,25) # specify range of color scale
plot1 = ggplot_dt(cv_dt[year == 2016],'prec_ano',rr = rr) + ggtitle('predicted anomaly, 2016')
cv_dt[,prec_ano := prec - mean(prec), by = .(lon,lat)] # forecast anomaly
cv_dt[,obs_ano := obs - mean(obs), by = .(lon,lat)] # observed anomaly
rr = c(-25,25) # specify range of color scale
ggplot_dt(cv_dt[year == 2016],'prec_ano',rr = rr)
ggplot_dt(cv_dt[year == 2016],'obs_ano',rr = rr)
cv_dt
cv_dt[,bias := mean(prec) - mean(obs), by = .(lon,lat)]
#derive and plot model bias:
cv_dt[,bias := mean(prec) - mean(obs), by = .(lon,lat)]
ggplot_dt(cv_dt,'model_bias',rr = rr)
ggplot_dt(cv_dt,'bias',rr = rr)
ggplot_dt(cv_dt,'bias')
?cv_to_dt
library(data.table)
library(ForecastTools)
library(SeaVal)
# set this to the data directory containing the cross-validation data,
# at ICPAC that should be something like '~SharedData/gcm/seasonal/202101/'. If you are using windows, you might need to replace '/' by '\' instead...
data_dir = '/nr/project/stat/CONFER/Data/validation/example_data/202101/'
### get cross-validation results ###
cv_dt = cv_to_dt(data_dir)
print(cv_dt)
### derive MSE skill scores ###
mse_dt = MSESS_dt(cv_dt,fc_col = 'prec',obs_col = 'obs')
print(mse_dt)
### plot results ###
ggplot_dt(mse_dt,'MSESS',rr = c(-0.5,0.5)) # rr is the range of the color scale
### get result by
mse_dt = add_countries(mse_dt) # adds a country column to the data.table
mse_dt
mse_dt[country == 'Tanzania']
mse_dt[,unique(country)]
mse_dt[,country_index = match(country,unique(mse_dt[,country]))]
mse_dt[,country_index := match(country,unique(mse_dt[,country]))]
mse_dt
ggplot_dt(mse_dt,'country_index')
rm(list = ls())
library(data.table)
library(sp)
library(dplyr)
library(raster)
data_dir = '/nr/project/stat/CONFER/Data/'
data = getData('GADM')
country_list = c('Sudan','South Sudan','Ethiopia','Eritrea','Somalia','Kenya','Tanzania','Uganda','Rwanda','Djibouti','Burundi')
ISOs = as.data.table(getData('ISO3'))[NAME %in% country_list]
# weirdly enough, the getData function does not support doing multiple countries at the same time:
iso1 = ISOs[1,ISO3]
country1 = getData('GADM', country = iso1,level = 0)
pols = polygons(country1)
for(iso in ISOs[2:.N,ISO3])
{
cc = getData('GADM', country = iso,level = 0)
pols = rbind(pols, polygons(cc), makeUniqueIDs = TRUE)
}
### for full- and half-degree grids get the within-ICPAC locations as data.table:
full_deg_locs = as.data.table(expand.grid(lon = -179:180,lat = -90:90))
locs = SpatialPoints(full_deg_locs,proj4string = crs(pols))
full_deg_locs = as.data.table(coordinates(locs))[!is.na(over(locs,pols)),]
setkey(full_deg_locs,lon,lat)
half_deg_locs = as.data.table(expand.grid(lon = seq(-179,180,0.5),lat = seq(-90,90,0.5)))
locs = SpatialPoints(half_deg_locs,proj4string = crs(pols))
half_deg_locs = as.data.table(coordinates(locs))[!is.na(over(locs,pols)),]
setkey(half_deg_locs,lon,lat)
ICPAC_borders = copy(pols)
# save:
save(ICPAC_borders,full_deg_locs,half_deg_locs,file = paste0(data_dir,'ICPAC_region.RData'))
#######################
# get the half-degree-locations with countryname:
library(rworldmap)
countriesSP = getMap(resolution = 'high')
temp = SpatialPoints(half_deg_locs,proj4string = CRS(proj4string(countriesSP)))
indices = over(temp,countriesSP)
half_deg_locs[,country := indices$ADMIN]
plot_diagnostic(half_deg_locs,'country')
cs = unique(indices$ADMIN)
half_deg_locs[,country_ind := match(country,cs)]
ggplot_dt(half_deg_locs,'country_ind')
cs
as.character(cs)
nonGHAcs = c('Libya','Egypt','United Republic of Tanzania','Malawi','Mozambique','Somaliland')
correctedcs = c('Sudan','Sudan','Tanzania','Tanzania','Tanzania','Somalia')
correct_countries = function(cs)
{
cs_new = as.character(cs)
cs_new[cs_new %in% nonGHAcs] = correctedcs[match(cs_new[cs_new %in% nonGHAcs],nonGHAcs)]
return(cs_new)
}
correct_countries(nonGHAcs)
half_deg_locs[,country := correct_countries(country)]
half_deg_locs
half_deg_locs[,unique(country)]
half_deg_locs[,c('Lon','Lat','country_ind') := NULL]
fwrite(half_deg_locs,file = '/nr/project/stat/CONFER/Data/GHAcountries.csv')
dt = mse_dt
library(data.table)
library(ForecastTools)
library(SeaVal)
# set this to the data directory containing the cross-validation data,
# at ICPAC that should be something like '~SharedData/gcm/seasonal/202101/'. If you are using windows, you might need to replace '/' by '\' instead...
data_dir = '/nr/project/stat/CONFER/Data/validation/example_data/202101/'
### get cross-validation results ###
cv_dt = cv_to_dt(data_dir)
print(cv_dt)
### derive MSE skill scores ###
mse_dt = MSESS_dt(cv_dt,fc_col = 'prec',obs_col = 'obs')
print(mse_dt)
data(countries)
cs = as.data.table(countries)
cs
cs[,unique(country)]
cs = fread(file = '/nr/project/stat/CONFER/Data/GHAcountries.csv')
cs
cs[,unique(country)]
fwrite(cs,file = '~/pkg/SeaVal/data/countries.csv',sep = ';')
q(save = 'no')
