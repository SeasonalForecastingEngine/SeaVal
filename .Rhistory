nc$nvars
nc$var$corr$ndims
nc$var$corr$dims
nc$var$corr$dimids
c(1,2)
is(c(1,2))
is(1)
subset_list = NULL
printunits = TRUE
vars = NULL
nc$nvars
names(nc$var)
?match
vars = 'corr'
vars = match(vars,names(nc$var),
nomatch = stop('one of the provided variable names is not contained in the netcdf.'))
names(nc$var)
vars
vars = match(vars,names(nc$var))
vars
vars = 'corr'
vars = match(vars,names(nc$var),
nomatch = stop('one of the provided variable names is not contained in the netcdf.'))
newvars = match(vars,names(nc$var),
nomatch = stop('one of the provided variable names is not contained in the netcdf.'))
vars
newvars = match(vars,names(nc$var))
newvars
vars = match(vars,names(nc$var))
vars
var
nc$var
nc$var[[1]]
v = nc$var[[var]]
var = vars[1]
v = nc$var[[var]]
v
v$dims
v$dim
v$units
nc
units = c(units, paste0(v$name,': ',v$units))
units
v$dim
length(v$dim)
v$ndims
dim_counts
i = 1
v$dim[[i]]
dim_lengths = c()
for(i in 1:v$ndims)
{
dim_lengths = c(dim_lengths,v$dim[[i]]$len)
}
dim_lengths
v$id
nc$var$corr
ncvar_get(nc,'corr')
test = data.table(NULL,test = 1:3)
test
dt_temp = NULL
i = 1
?rep
dim_lengths[3]
?prod
v$ndims
dimension_vector = rep(v$dim[[i]],times = prod(dim_lengths[i+1,v$ndims + 1],na.rm = T))
dimension_vector = rep(v$dim[[i]],times = prod(dim_lengths[(i+1):(v$ndims + 1)],na.rm = T))
dimension_vector
v$dim[[i]]
dimension_vector = rep(v$dim[[i]]$vals,times = prod(dim_lengths[(i+1):(v$ndims + 1)],na.rm = T))
length(dimension_vector)
prod(dim_lengths)
#... and then to repeat this using each = {the product of lengths of 'earlier' dimension vectors}:
dimension_vector = rep(dimension_vector,each = prod(dim_lengths[0:(i-1)],na.rm = T))
dimension_vector
length(dimension_vector)
v$dimids
v$dim
dt_temp = NULL
dt_temp = data.table(dt_temp, data.table(v$dim[[i]]$name))
dt_temp
dt_temp = NULL
# vectorize dimension entries:
# we need to first repeat using times = {the product of lengths of 'later' dimension vectors}...
dimension_vector = rep(v$dim[[i]]$vals,times = prod(dim_lengths[(i+1):(v$ndims + 1)],na.rm = T))
#... and then to repeat this using each = {the product of lengths of 'earlier' dimension vectors}:
dimension_vector = rep(dimension_vector,each = prod(dim_lengths[0:(i-1)],na.rm = T))
dt_temp = data.table(dt_temp, data.table(v$dim[[i]]$name = dimension_vector))
dt_temp = data.table(dt_temp, data.table((v$dim[[i]]$name) = dimension_vector))
?data.table
dt_temp = data.table(dt_temp, as.list(setNames( dimension_vector,v$dim[[i]]$name))
}
}
if(printunits)
{
catout = paste0(c('Units:',units),sep = '',collapse = "\n")
cat(catout)
}
dim_list = c()
dim_ids = c()
units = c()
dim_starts = c()
dim_counts = c()
dt_temp = data.table(dt_temp, as.list(setNames( dimension_vector,v$dim[[i]]$name)))
dt_temp = NULL
dt_temp = data.table(dt_temp, as.list(setNames( dimension_vector,v$dim[[i]]$name)))
dt_temp
v$dim[[i]]$name
setNames( dimension_vector,v$dim[[i]]$name)
?setnames
dt_ttemp = data.table(dimension_vector)
dt_temp = NULL
for(i in 1:v$ndims)
{
# vectorize dimension entries:
# we need to first repeat using times = {the product of lengths of 'later' dimension vectors}...
dimension_vector = rep(v$dim[[i]]$vals,times = prod(dim_lengths[(i+1):(v$ndims + 1)],na.rm = T))
#... and then to repeat this using each = {the product of lengths of 'earlier' dimension vectors}:
dimension_vector = rep(dimension_vector,each = prod(dim_lengths[0:(i-1)],na.rm = T))
dt_ttemp = data.table(dimension_vector)
setnames(dt_ttemp,v$dim[[i]]$name)
dt_temp = data.table(dt_temp, dt_ttemp)
}
dt_temp
ggplot_dt(dt_temp,'lon')
dt_temp[,llon:=lon]
ggplot_dt(dt_temp,'llon')
dt_temp[,llat:=lat]
ggplot_dt(dt_temp,'llat')
dt_ttemp = data.table(as.vector(ncvar_get(nc,varid = v$name)))
dt_ttemp
setnames(dt_ttemp,v$name)
dt_list = list()
for(var in vars)
{
v = nc$var[[var]]
units = c(units, paste0(v$name,': ',v$units))
dim_lengths = v$varsize
dt_temp = NULL
# generate data.table with dimensions:
for(i in 1:v$ndims)
{
# vectorize dimension entries:
# we need to first repeat using times = {the product of lengths of 'later' dimension vectors}...
dimension_vector = rep(v$dim[[i]]$vals,times = prod(dim_lengths[(i+1):(v$ndims + 1)],na.rm = T))
#... and then to repeat this using each = {the product of lengths of 'earlier' dimension vectors}:
dimension_vector = rep(dimension_vector,each = prod(dim_lengths[0:(i-1)],na.rm = T))
dt_ttemp = data.table(dimension_vector)
setnames(dt_ttemp,v$dim[[i]]$name)
dt_temp = data.table(dt_temp, dt_ttemp)
}
# add variable values:
dt_ttemp = data.table(as.vector(ncvar_get(nc,varid = v$name)))
setnames(dt_ttemp,v$name)
dt_list = c(dt_list,list(data.table(dt_temp,dt_ttemp)))
}
dt_list[[1]]
ggplot_dt(dt_list[[1]])
trymerge = T
?merge
i
names(nc$dim)[i]
nc$dim[[i]]$units
rm(list = ls())
library(ForecastTools)
library(SeaVal)
library(ncdf4)
data_dir = '/nr/project/stat/CONFER/Data/validation/example_data/202102/'
test = ncdf_to_dt(nc= paste0(data_dir,'CorrelationSkillRain_Feb-Apr_Feb2021.nc'))
# args:
nc = nc_open(paste0(data_dir,'CorrelationSkillRain_Feb-Apr_Feb2021.nc'))
subset_list = NULL
printunits = TRUE
trymerge = TRUE
# function:
if(is.character(nc)) nc = nc_open(nc)
vars = NULL
units = NULL
# vars should be numeric vector indexing the variables you want to extract
if(is.null(vars)) vars = 1:nc$nvars
else if(is.character(vars))
{
vars = match(vars,names(nc$var))
}
dt_list = list()
for(var in vars)
{
v = nc$var[[var]]
units = c(units, paste0(v$name,': ',v$units))
dim_lengths = v$varsize
dt_temp = NULL
# generate data.table with dimensions:
for(i in 1:v$ndims)
{
# vectorize dimension entries:
# we need to first repeat using times = {the product of lengths of 'later' dimension vectors}...
dimension_vector = rep(v$dim[[i]]$vals,times = prod(dim_lengths[(i+1):(v$ndims + 1)],na.rm = T))
#... and then to repeat this using each = {the product of lengths of 'earlier' dimension vectors}:
dimension_vector = rep(dimension_vector,each = prod(dim_lengths[0:(i-1)],na.rm = T))
dt_ttemp = data.table(dimension_vector)
setnames(dt_ttemp,v$dim[[i]]$name)
dt_temp = data.table(dt_temp, dt_ttemp)
}
# add variable values:
dt_ttemp = data.table(as.vector(ncvar_get(nc,varid = v$name)))
setnames(dt_ttemp,v$name)
dt_list = c(dt_list,list(data.table(dt_temp,dt_ttemp)))
}
# merge list into data.table:
if(trymerge)
{
if(length(dt_list == 1))
{
dt_list = unlist(dt_list)
} else
{
dt0 = dt_list[[1]]
for(i in 2:length(list))
{
dt0 = merge(dt0,dt_list[[i]],by = intersect(names(dt0,dt_list[[i]])), all = T)
}
dt_list = dt0
}
}
# print units of dimension variables:
if(printunits)
{
for(i in 1:length(nc$dim))
{
units = c(units, paste0(names(nc$dim)[i],': ',nc$dim[[i]]$units))
}
catout = paste0(c('Units:',units),sep = '',collapse = "\n")
cat(catout)
}
dt_list
vars
vars = NULL
units = NULL
# vars should be numeric vector indexing the variables you want to extract
if(is.null(vars))
{
vars = 1:nc$nvars
} else if(is.character(vars))
{
vars = match(vars,names(nc$var))
}
dt_list = list()
for(var in vars)
{
v = nc$var[[var]]
units = c(units, paste0(v$name,': ',v$units))
dim_lengths = v$varsize
dt_temp = NULL
# generate data.table with dimensions:
for(i in 1:v$ndims)
{
# vectorize dimension entries:
# we need to first repeat using times = {the product of lengths of 'later' dimension vectors}...
dimension_vector = rep(v$dim[[i]]$vals,times = prod(dim_lengths[(i+1):(v$ndims + 1)],na.rm = T))
#... and then to repeat this using each = {the product of lengths of 'earlier' dimension vectors}:
dimension_vector = rep(dimension_vector,each = prod(dim_lengths[0:(i-1)],na.rm = T))
dt_ttemp = data.table(dimension_vector)
setnames(dt_ttemp,v$dim[[i]]$name)
dt_temp = data.table(dt_temp, dt_ttemp)
}
# add variable values:
dt_ttemp = data.table(as.vector(ncvar_get(nc,varid = v$name)))
setnames(dt_ttemp,v$name)
dt_list = c(dt_list,list(data.table(dt_temp,dt_ttemp)))
}
# merge list into data.table:
if(trymerge)
{
if(length(dt_list == 1))
{
dt_list = unlist(dt_list)
} else
{
dt0 = dt_list[[1]]
for(i in 2:length(list))
{
dt0 = merge(dt0,dt_list[[i]],by = intersect(names(dt0,dt_list[[i]])), all = T)
}
dt_list = dt0
}
}
# print units of dimension variables:
if(printunits)
{
for(i in 1:length(nc$dim))
{
units = c(units, paste0(names(nc$dim)[i],': ',nc$dim[[i]]$units))
}
catout = paste0(c('Units:',units),sep = '',collapse = "\n")
cat(catout)
}
dt_list
trymerge
fns = list.files(path = data_dir,pattern = '*.nc')
fns
for(nc in fns)
{
test = netcdf_to_dt(nc)
print(test)
}
source('~/pkg/ForecastTools/R/ncdf_to_dt.R')
for(nc in fns)
{
test = netcdf_to_dt(nc)
print(test)
}
for(nc in fns)
{
test = netcdf_to_dt(paste0(data_dir,nc))
print(test)
}
for(nc in fns)
{
print(nc)
test = netcdf_to_dt(paste0(data_dir,nc))
}
test = nc_open(paste0(data_dir,nc))
test
nc = paste0(data_dir,nc)
vars = NULL
printunits = TRUE
trymerge = TRUE
if(is.character(nc)) nc = nc_open(nc)
# convert vars to numeric vector indexing the variables you want to extract:
if(is.null(vars))
{
vars = 1:nc$nvars
} else if(is.character(vars))
{
vars = match(vars,names(nc$var))
}
vars
dt_list = list()
units = NULL
var = 1
v = nc$var[[var]]
v
units = c(units, paste0(v$name,': ',v$units))
units
dim_lengths = v$varsize
dim_lengths
dt_temp = NULL
i = 1
# vectorize dimension entries:
# we need to first repeat using times = {the product of lengths of 'later' dimension vectors}...
dimension_vector = rep(v$dim[[i]]$vals,times = prod(dim_lengths[(i+1):(v$ndims + 1)],na.rm = T))
#... and then to repeat this using each = {the product of lengths of 'earlier' dimension vectors}:
dimension_vector = rep(dimension_vector,each = prod(dim_lengths[0:(i-1)],na.rm = T))
dt_ttemp = data.table(dimension_vector)
setnames(dt_ttemp,v$dim[[i]]$name)
dt_temp = data.table(dt_temp, dt_ttemp)
dt_temp = NULL
for(i in 1:v$ndims)
{
# vectorize dimension entries:
# we need to first repeat using times = {the product of lengths of 'later' dimension vectors}...
dimension_vector = rep(v$dim[[i]]$vals,times = prod(dim_lengths[(i+1):(v$ndims + 1)],na.rm = T))
#... and then to repeat this using each = {the product of lengths of 'earlier' dimension vectors}:
dimension_vector = rep(dimension_vector,each = prod(dim_lengths[0:(i-1)],na.rm = T))
dt_ttemp = data.table(dimension_vector)
setnames(dt_ttemp,v$dim[[i]]$name)
dt_temp = data.table(dt_temp, dt_ttemp)
}
dt_ttemp = data.table(as.vector(ncvar_get(nc,varid = v$name)))
setnames(dt_ttemp,v$name)
dt_list = c(dt_list,list(data.table(dt_temp,dt_ttemp)))
dt_list = list()
units = NULL
for(var in vars)
{
v = nc$var[[var]]
units = c(units, paste0(v$name,': ',v$units))
dim_lengths = v$varsize
dt_temp = NULL
# generate data.table with dimensions:
for(i in 1:v$ndims)
{
# vectorize dimension entries:
# we need to first repeat using times = {the product of lengths of 'later' dimension vectors}...
dimension_vector = rep(v$dim[[i]]$vals,times = prod(dim_lengths[(i+1):(v$ndims + 1)],na.rm = T))
#... and then to repeat this using each = {the product of lengths of 'earlier' dimension vectors}:
dimension_vector = rep(dimension_vector,each = prod(dim_lengths[0:(i-1)],na.rm = T))
dt_ttemp = data.table(dimension_vector)
setnames(dt_ttemp,v$dim[[i]]$name)
dt_temp = data.table(dt_temp, dt_ttemp)
}
# add variable values:
dt_ttemp = data.table(as.vector(ncvar_get(nc,varid = v$name)))
setnames(dt_ttemp,v$name)
dt_list = c(dt_list,list(data.table(dt_temp,dt_ttemp)))
}
length(dt_list) == 1
dt0 = dt_list[[1]]
dt0
i = 2
dt0 = merge(dt0,dt_list[[i]],by = intersect(names(dt0,dt_list[[i]])), all = T)
intersect(names(dt0,dt_list[[i]]))
dt0 = merge(dt0,dt_list[[i]],by = intersect(names(dt0),names(dt_list[[i]])), all = T)
# merge list into data.table:
if(trymerge)
{
if(length(dt_list) == 1)
{
dt_list = unlist(dt_list)
} else
{
dt0 = dt_list[[1]]
for(i in 2:length(list))
{
dt0 = merge(dt0,dt_list[[i]],by = intersect(names(dt0),names(dt_list[[i]])), all = T)
}
dt_list = dt0
}
}
dt_list
# merge list into data.table:
if(trymerge)
{
if(length(dt_list) == 1)
{
dt_list = unlist(dt_list)
} else
{
dt0 = dt_list[[1]]
for(i in 2:length(dt_list))
{
dt0 = merge(dt0,dt_list[[i]],by = intersect(names(dt0),names(dt_list[[i]])), all = T)
}
dt_list = dt0
}
}
nc
source('~/pkg/ForecastTools/R/ncdf_to_dt.R')
for(nc in fns)
{
print(nc)
test = netcdf_to_dt(paste0(data_dir,nc,print_units = FALSE))
}
rm(list = ls())
library(ForecastTools)
library(SeaVal)
library(ncdf4)
source('~/pkg/ForecastTools/R/ncdf_to_dt.R')
data_dir = '/nr/project/stat/CONFER/Data/validation/example_data/202102/'
fns = list.files(path = data_dir,pattern = '*.nc')
for(nc in fns)
{
print(nc)
test = netcdf_to_dt(paste0(data_dir,nc,print_units = FALSE))
}
fns
nc
test = netcdf_to_dt(paste0(data_dir,nc),print_units = FALSE)
for(nc in fns)
{
print(nc)
test = netcdf_to_dt(paste0(data_dir,nc),printunits = FALSE)
}
test = nc_open(paste0(data_dir,nc))
"PrecRegPeXcd_3monthSeasonal.nc"
nc = "PrecRegPeXcd_3monthSeasonal.nc"
test = netcdf_to_dt(paste0(data_dir,nc),printunits = FALSE)
test
test = nc_open(paste0(data_dir,nc))
test
test
nc = "PrecRegPeXcd_3monthSeasonal.nc"
printunits = TRUE
trymerge = TRUE
if(is.character(nc)) nc = nc_open(nc)
is(nc)
nc
nc = paste0(data_dir,nc)
if(is.character(nc)) nc = nc_open(nc)
# convert vars to numeric vector indexing the variables you want to extract:
if(is.null(vars))
{
vars = 1:nc$nvars
} else if(is.character(vars))
{
vars = match(vars,names(nc$var))
}
vars = NULL
nc = paste0(data_dir,nc)
rm(list = ls())
library(ForecastTools)
library(SeaVal)
library(ncdf4)
source('~/pkg/ForecastTools/R/ncdf_to_dt.R')
data_dir = '/nr/project/stat/CONFER/Data/validation/example_data/202102/'
fns = list.files(path = data_dir,pattern = '*.nc')
for(nc in fns)
{
print(nc)
test = netcdf_to_dt(paste0(data_dir,nc),printunits = FALSE)
}
test = nc_open(paste0(data_dir,nc))
nc = paste0(data_dir,nc)
nc = "PrecRegPeXcd_3monthSeasonal.nc"
nc = paste0(data_dir,nc)
vars = NULL
printunits = TRUE
trymerge = TRUE
q(save = 'no')
devtools::document()
q()
